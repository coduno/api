package model

import (
	"errors"

	"golang.org/x/net/context"
	"google.golang.org/appengine/datastore"
)

// {{type}}Kind is the kind used in Datastore to store entities {{type}} entities.
const {{type}}Kind = {{kind}}

// {{slice}} is just a slice of {{type}}.
type {{slice}} []{{type}}

// Keyed{{type}} is a struct that embeds {{type}} and also contains a Key, mainly used for encoding to JSON.
type Keyed{{type}} struct{
	*{{type}}
	Key *datastore.Key
}

// Key is a shorthand to fill a Keyed{{type}} with an entity and it's key.
func ({{t}} *{{type}}) Key(key *datastore.Key) (*Keyed{{type}}) {
	return &Keyed{{type}}{
		{{type}}: {{t}},
		Key:      key,
	}
}

// Key is a shorthand to fill a slice of Keyed{{type}} with some entities alongside their keys.
func ({{t}} {{slice}}) Key(keys []*datastore.Key) (keyed []Keyed{{type}}) {
	if len(keys) != len({{t}}) {
		panic("Key() called on an slice with len(keys) != len(slice)")
	}

	keyed = make([]Keyed{{type}}, len({{t}}))
	for i := range keyed {
		keyed[i] = Keyed{{type}}{
			{{type}}: &{{t}}[i],
			Key:      keys[i],
		}
	}
	return
}

// Save will put this {{type}} into Datastore using the given key.
func ({{t}} {{type}}) Save(ctx context.Context, key *datastore.Key) (*datastore.Key, error) {
	if key != nil {
		return datastore.Put(ctx, key, &{{t}})
	}

	return datastore.Put(ctx, datastore.NewIncompleteKey(ctx, {{kind}}, nil), &{{t}})
}

// SaveWithParent can be used to save this {{type}} as child of another
// entity.
// This will error if parent == nil.
func ({{t}} {{type}}) SaveWithParent(ctx context.Context, parent *datastore.Key) (*datastore.Key, error) {
	if parent == nil {
		return nil, errors.New("parent key is nil, expected a valid key")
	}
	return datastore.Put(ctx, datastore.NewIncompleteKey(ctx, {{kind}}, parent), &{{t}})
}

// NewQueryFor{{type}} prepares a datastore.Query that can be
// used to query entities of type {{type}}.
func NewQueryFor{{type}}() *datastore.Query {
	return datastore.NewQuery({{kind}})
}
