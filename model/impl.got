package model

import (
	"google.golang.org/appengine/datastore"
)

type {{slice}} []{{type}}

type Keyed{{type}} struct{
	*{{type}}
	Key      *datastore.Key
}

func ({{t}} *{{type}}) Key(key *datastore.Key) (*Keyed{{type}}) {
	return &Keyed{{type}}{
		{{type}}: {{t}},
		Key:      key,
	}
}

func ({{t}} {{slice}}) Key(keys []*datastore.Key) (keyed []Keyed{{type}}) {
	if len(keys) != len({{t}}) {
		panic("Key() called on an slice with len(keys) != len(slice)")
	}

	keyed = make([]Keyed{{type}}, len({{t}}))
	for i := range keyed {
		keyed[i] = Keyed{{type}}{
			{{type}}: &{{t}}[i],
			Key:      keys[i],
		}
	}
	return
}
